# -*- coding: utf-8 -*-
"""Student_RBI_Chatbot_Final_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yh74Gv6kyb_xS1lmDlbsxPk7pHV5A3Lj

THIS IS THE CHATBOT BUILT USING THE **"DICGC_FAQs_Cleaned_RBI.txt"** document. Have followed the steps laid down by Generative AI
# Get the list of Document from RBI Site
# Clean the document using Generative AI
# Upload the document in the temporary session
# Have the colab code created using open AI
# Ensure you have the OPEN API Key
# tweak the code as appropriate.
# run the model
"""



# üü¢ STEP 1: Install Required Libraries

!pip install langchain-google-genai google-generativeai langchain-community
!pip install faiss-cpu
# üü¢ STEP 2: Import Dependencies
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings # Import Google's embeddings
from langchain.chains import RetrievalQA
import os

# üü¢ STEP 3: Set Your OpenAI API Key
# üí° INSTRUCTION: Paste your OpenAI API key be
# GOOGLE_API_KEY=YOUR_K = "sk-proj-QgnVafN-uha
# a4ofPrFiP6zE0iKgOBYhe4AqTpHzV3yOm2rGQ1NKZvVeQPctiWLsjq8LgbpDT3BlbkFJWQMs5bGr2KHjrPPOQ7H8nT1Zz8WIieGTxF0y_dzFAPiOGhejTaajUu0cdzX9Es4ICZIRZ6ov8A"



import os
os.environ["AIzaSyBEfUPhyvmWWKNbUaPafu3djJ6-K0rZvCw"] = "AAAAA"

# üü¢ STEP 4: Upload RBI Regulation File
# üí° INSTRUCTION: Click the folder icon in the left sidebar ‚Üí Upload file ‚Üí Upload your .txt file (e.g., DICGC_FAQs_Cleaned_RBI.txt)
file_path = "C:/Users/Rishal/Desktop/INFINITY/SEM 4/fintech/MODEL-2/JAGDISH/Document for Model Final.txt" # Update if your file name is different

# üü¢ STEP 5: Load the Document
loader = TextLoader(file_path, encoding='latin-1')
documents = loader.load()

# üü¢ STEP 6: Split into Chunks (for better memory)
splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=100)
chunks = splitter.split_documents(documents)

# üü¢ STEP 7: Create Embeddings and Vector Store
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001") # Use Google's embeddings
vectorstore = FAISS.from_documents(chunks, embeddings)

from langchain_google_genai import ChatGoogleGenerativeAI

llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0.2)
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=vectorstore.as_retriever())

# POSSIBLE LIST OF QUESTIONS
# What is the maximum deposit insurance limit?"
# Are joint accounts insured separately?"
# Can a bank opt out of DICGC coverage?"

# üü¢ STEP 9: Ask Question 1 to Your RBI Chatbot
# üí¨ Try replacing these with your own questions
questions = [
    "To which entities do these Digital Lending Directions apply?"
    ]

for q in questions:
    print(f"‚ùì Question: {q}")
    answer = qa_chain.run(q)
    print(f"‚úÖ Answer: {answer}\n")

# üü¢ STEP 9: Ask Question 2 to Your RBI Chatbot
# üí¨ Try replacing these with your own questions
questions = [
    "Are NBFCs allowed to accept demand deposits like banks?"
    ]

for q in questions:
    print(f"‚ùì Question: {q}")
    answer = qa_chain.run(q)
    print(f"‚úÖ Answer: {answer}\n")

# üü¢ STEP 9: Ask Question 3 to Your RBI Chatbot
# üí¨ Try replacing these with your own questions
questions = [
    "Which authority regulates NBFCs in India and issues lending-related guidelines??"
]

for q in questions:
    print(f"‚ùì Question: {q}")
    answer = qa_chain.run(q)
    print(f"‚úÖ Answer: {answer}\n")

# üü¢ ALL QUESTIONS TOGETHER: Ask Questions to Your RBI Chatbot
# üí¨ Try replacing these with your own questions
questions = [
 "According to the document, what is the definition of a Lending Service Provider (LSP)?"

"What is the maximum cap on the Default Loss Guarantee (DLG) cover for any outstanding loan portfolio?"

"What is the minimum duration for the cooling-off period that must be offered to a borrower?"

"Where must a Regulated Entity (RE) ensure all borrower data is stored?"

"Can a Digital Lending App (DLA) access a borrower's contact list or call logs?"

"List the three forms in which a DLG can be accepted by a Regulated Entity."

"By what date must Regulated Entities complete the reporting of all their DLAs on the CIMS portal?"

"If a borrower's complaint is not resolved by the Regulated Entity within 30 days, where can they lodge a complaint?"
]
for q in questions:
    print(f"‚ùì Question: {q}")
    answer = qa_chain.run(q)
    print(f"‚úÖ Answer: {answer}\n")

# Install faiss-cpu for vector store
!pip install faiss-cpu